{"ast":null,"code":"var _jsxFileName = \"/Users/JV/react/front-end-playback/src/components/chart.jsx\";\nimport React from \"react\";\nimport { Dropdown, Table, Form, Button, Spinner, Row, Col, Alert } from \"react-bootstrap\";\nimport style from \"./chart.css\";\nimport { Line } from \"react-chartjs-2\";\nimport Routes from \"./routes\";\nconst lineColors = [\"rgb(237, 41, 58)\", \"rgb(75,192,192)\", \"rgb(230,54,192)\", \"rgb(100, 53, 201)\", \"rgb(33, 133, 208)\"];\nconst options = {\n  responsive: true,\n  scales: {\n    xAxes: [{\n      display: true,\n      scaleLabel: {\n        display: true,\n        labelString: \"Dates\"\n      }\n    }],\n    yAxes: [{\n      display: true,\n      scaleLabel: {\n        display: true,\n        labelString: \"# of Requests\"\n      }\n    }]\n  }\n};\n\nclass StatsChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUpdate = result => {\n      if (!result) return null;\n      let i = 0; // update data to the line chart\n\n      let lineData = {};\n      lineData.datasets = [];\n      lineData.labels = result.labels;\n      result.data.forEach(uri => {\n        lineData.datasets.push({\n          label: `uri(${uri.name})`,\n          data: uri.traffic,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: lineColors[i],\n          borderColor: lineColors[i],\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: lineColors[i],\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: lineColors[i],\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10\n        });\n        ++i;\n      });\n      this.setState({\n        lineData: lineData\n      });\n    };\n\n    this.state = {\n      lineData: {}\n    };\n  } // handle new request and update the line chart, result param received from StatsChartOptionsBar.\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: style.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Traffic Analysis Chart\"), /*#__PURE__*/React.createElement(StatsChartOptionsBar, {\n      data: this.props.data,\n      lineHandler: this.handleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      data: this.state.lineData,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nclass StatsChartOptionsBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uriList: [\"/home\", \"/home/uri\", \"/traffic/abc/dsassfcsaaaaaaaaa\", \"/hello\", \"/hi\", \"/abc\"],\n      uriListVisible: [true, true, true, true, true, true],\n      applyLoading: false,\n      error: false,\n      errorText: \"Something wrong!\"\n    };\n  }\n\n  render() {\n    const content = [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.optionContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default StatsChart;","map":{"version":3,"sources":["/Users/JV/react/front-end-playback/src/components/chart.jsx"],"names":["React","Dropdown","Table","Form","Button","Spinner","Row","Col","Alert","style","Line","Routes","lineColors","options","responsive","scales","xAxes","display","scaleLabel","labelString","yAxes","StatsChart","Component","constructor","props","handleUpdate","result","i","lineData","datasets","labels","data","forEach","uri","push","label","name","traffic","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setState","state","render","chartContainer","title","StatsChartOptionsBar","uriList","uriListVisible","applyLoading","error","errorText","content","optionContainer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Dropdown,\n  Table,\n  Form,\n  Button,\n  Spinner,\n  Row,\n  Col,\n  Alert,\n} from \"react-bootstrap\";\nimport style from \"./chart.css\";\nimport { Line } from \"react-chartjs-2\";\nimport Routes from \"./routes\";\n\nconst lineColors = [\n  \"rgb(237, 41, 58)\",\n  \"rgb(75,192,192)\",\n  \"rgb(230,54,192)\",\n  \"rgb(100, 53, 201)\",\n  \"rgb(33, 133, 208)\",\n];\n\nconst options = {\n  responsive: true,\n  scales: {\n    xAxes: [\n      {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: \"Dates\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: \"# of Requests\",\n        },\n      },\n    ],\n  },\n};\n\nclass StatsChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineData: {},\n    };\n  }\n\n  // handle new request and update the line chart, result param received from StatsChartOptionsBar.\n  handleUpdate = (result) => {\n    if (!result) return null;\n    let i = 0;\n    // update data to the line chart\n    let lineData = {};\n    lineData.datasets = [];\n    lineData.labels = result.labels;\n    result.data.forEach((uri) => {\n      lineData.datasets.push({\n        label: `uri(${uri.name})`,\n        data: uri.traffic,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: lineColors[i],\n        borderColor: lineColors[i],\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: lineColors[i],\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: lineColors[i],\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n      });\n      ++i;\n    });\n    this.setState({ lineData: lineData });\n  };\n\n  render() {\n    return (\n      <div className={style.chartContainer}>\n        <h2 className={style.title}>Traffic Analysis Chart</h2>\n        <StatsChartOptionsBar\n          data={this.props.data}\n          lineHandler={this.handleUpdate}\n        />\n        <hr></hr>\n        <Line data={this.state.lineData} options={options} />\n      </div>\n    );\n  }\n}\n\nclass StatsChartOptionsBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uriList: [\n        \"/home\",\n        \"/home/uri\",\n        \"/traffic/abc/dsassfcsaaaaaaaaa\",\n        \"/hello\",\n        \"/hi\",\n        \"/abc\",\n      ],\n      uriListVisible: [true, true, true, true, true, true],\n      applyLoading: false,\n      error: false,\n      errorText: \"Something wrong!\",\n    };\n  }\n\n  render() {\n    const content = [];\n\n    return <div className={style.optionContainer}></div>;\n  }\n}\n\nexport default StatsChart;\n"]},"metadata":{},"sourceType":"module"}